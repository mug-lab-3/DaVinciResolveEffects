--[[-- 
Based on "Example 6 Text.fuse" included with DaVinci Resolve.
--]]--

--******************************************************************************************************
-- This Registers the Fuse into Fusion, gives its Name, and Menu location. Location of Help. Can Fuse be edited.
FuRegisterClass("TextAnnotate", CT_Tool, {
	REGS_Name          = "Highlight Text",
	REGS_Category      = "Fuses\\Mug\\Text",
	REGS_OpIconString  = "E6Tx",
	REGS_OpDescription = "Example, using Text and Strings",
	REGS_HelpTopic     = "Example Location of Help", --This can be a URL
	REGS_URL           = "www.blackmagicdesign.com",
	--REGS_IconID = "Icons.Tools.Icons.Example",-- This can be Inline as an array of Values
	REG_OpNoMask      = false,
	REG_NoBlendCtrls  = false,
	REG_NoObjMatCtrls = false,
	REG_NoMotionBlurCtrls = false,
	REG_Fuse_NoEdit   = false,
	REG_Fuse_NoReload = false,
	REG_Version       = 1, 
}) -- End of RegisterClass

	
function Create()
	InText = self:AddInput("Styled Text", "StyledText", {
		LINKID_DataType    = "Text",
		INPID_InputControl = "TextEditControl",
		TEC_Lines          = 1, --How many lines high is the Input.
		INP_DoNotifyChanged = true,
	})
	
	InFont = self:AddInput("Font", "Font", {
		LINKID_DataType     = "Text",
		INPID_InputControl  = "FontFileControl",
		IC_ControlGroup     = 2,
		IC_ControlID        = 0,
		INP_Level           = 1,
		INP_DoNotifyChanged = true,
	})
		
	InFontStyle = self:AddInput("Style", "Style", {
		LINKID_DataType     = "Text",
		INPID_InputControl  = "FontFileControl",
		IC_ControlGroup     = 2,
		IC_ControlID        = 1,
		INP_Level           = 1,
		INP_DoNotifyChanged = true,
	})

		
	InPosition = self:AddInput("Position", "Position", {
		LINKID_DataType      = "Point",
		INPID_InputControl   = "OffsetControl",
		INPID_PreviewControl = "CrosshairControl",
		})

	InSize = self:AddInput("Size", "Size", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "SliderControl",
		INP_MinScale       = 0.0,
		INP_MaxScale       = 0.5,
		INP_Default        = 0.08,
		})


	
	InJustify = self:AddInput("Justification", "Justification", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default        = 0.0,
		{ MBTNC_AddButton  = "Left",   MBTNCD_ButtonWidth = 1/3, },
		{ MBTNC_AddButton  = "Center", MBTNCD_ButtonWidth = 1/3, },
		{ MBTNC_AddButton  = "Right",  MBTNCD_ButtonWidth = 1/3, },
		INP_Integer = true,
		})

	InHighlightLow = self:AddInput("Highlight Low", "HighlightLow", {
			LINKID_DataType = "Number",
			INPID_InputControl = "RangeControl",
			INP_Default = 0.0,
			IC_ControlGroup = 3,
			IC_ControlID = 0,
			INP_Integer = true,
			INP_MinAllowed = 0,
			INP_MaxAllowed = 0,
	})
		   
	InHighlightHigh = self:AddInput("Highlight High", "HighlightHigh", {
			LINKID_DataType = "Number",
			INPID_InputControl = "RangeControl",
			INP_Default = 0.0,
			INP_MaxScale = 0.0,
			IC_ControlGroup = 3,
			IC_ControlID = 1,
			INP_Integer = true,
			INP_MinAllowed = 0,
			INP_MaxAllowed = 0,
	})
	
	InR = self:AddInput("Red", "Red", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale       = 0.0,
		INP_MaxScale       = 1.0,
		INP_Default        = 1.0,
		ICS_Name           = "Color",
		CLRC_ShowWheel     = false,
		IC_ControlGroup    = 1,
		IC_ControlID       = 0,  -- Red ID
		})
		
	InG = self:AddInput("Green", "Green", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale       = 0.0,
		INP_MaxScale       = 1.0,
		INP_Default        = 1.0,
		IC_ControlGroup    = 1,
		IC_ControlID       = 1,  -- Green ID
		})
		
	InB = self:AddInput("Blue", "Blue", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale       = 0.0,
		INP_MaxScale       = 1.0,
		INP_Default        = 1.0,
		IC_ControlGroup    = 1,
		IC_ControlID       = 2,  -- Blue ID
		})
		
	InA = self:AddInput("Alpha", "Alpha", {
		LINKID_DataType    = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale       = 0.0,
		INP_MaxScale       = 1.0,
		INP_Default        = 1.0,
		IC_ControlGroup    = 1,
		IC_ControlID       = 3,  -- Alpha ID
		})
	
	InImage = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main       = 1,
		})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main       = 1,
		})	
end

local bit = require("bit")

function Utf8StrToUtf32Array(utf8str)
	local utf16bytes = {}
	local i = 1
	while i <= #utf8str do
		local c = utf8str:byte(i)
		if c < 0x80 then
			table.insert(utf16bytes, 0)
			table.insert(utf16bytes, c)
			i = i + 1
		elseif c < 0xE0 then
			local c2 = utf8str:byte(i + 1)
			local u = bit.bor(bit.lshift(bit.band(c, 0x1F), 6), bit.band(c2, 0x3F))
			table.insert(utf16bytes, bit.rshift(u, 8))
			table.insert(utf16bytes, bit.band(u, 0xFF))
			i = i + 2
		elseif c < 0xF0 then
			local c2 = utf8str:byte(i + 1)
			local c3 = utf8str:byte(i + 2)
			local u = bit.bor(bit.lshift(bit.band(c, 0x0F), 12), bit.lshift(bit.band(c2, 0x3F), 6), bit.band(c3, 0x3F))
			table.insert(utf16bytes, bit.rshift(u, 8))
			table.insert(utf16bytes, bit.band(u, 0xFF))
			i = i + 3
		else
			local c2 = utf8str:byte(i + 1)
			local c3 = utf8str:byte(i + 2)
			local c4 = utf8str:byte(i + 3)
			local u = bit.bor(bit.lshift(bit.band(c, 0x07), 18), bit.lshift(bit.band(c2, 0x3F), 12), bit.lshift(bit.band(c3, 0x3F), 6), bit.band(c4, 0x3F))
			u = u - 0x10000
			local high = bit.bor(0xD800, bit.rshift(u, 10))
			local low = bit.bor(0xDC00, bit.band(u, 0x3FF))
			table.insert(utf16bytes, bit.rshift(high, 8))
			table.insert(utf16bytes, bit.band(high, 0xFF))
			table.insert(utf16bytes, bit.rshift(low, 8))
			table.insert(utf16bytes, bit.band(low, 0xFF))
			i = i + 4
		end
	end

	local utf32bytes = {}
	i = 1
	while i <= #utf16bytes do
		local b1 = utf16bytes[i]
		local b2 = utf16bytes[i + 1]
		local code_unit = bit.bor(bit.lshift(b1, 8), b2)
		if code_unit >= 0xD800 and code_unit <= 0xDBFF then
			-- High surrogate
			local b3 = utf16bytes[i + 2]
			local b4 = utf16bytes[i + 3]
			local low_surrogate = bit.bor(bit.lshift(b3, 8), b4)
			local code_point = bit.bor(bit.lshift(bit.band(code_unit, 0x3FF), 10), bit.band(low_surrogate, 0x3FF)) + 0x10000
			table.insert(utf32bytes, code_point)
			i = i + 4
		else
			-- Non-surrogate
			table.insert(utf32bytes, code_unit)
			i = i + 2
		end
	end
	return utf32bytes
end

function getLineDrawWidth(unicodeArray, font, style, size)
	local lineWidth = 0
	
	local tfm = TextStyleFontMetrics(TextStyleFont(font, style))
	for i = 1, #unicodeArray do
		-- add the kerning between this character and the previous one
		if 1 < i then
			local kerning = tfm:CharacterKerning(unicodeArray[i - 1], unicodeArray[i]) * 10 * size
			lineWidth = lineWidth + kerning
		end
		-- add the width of the character
		lineWidth = lineWidth + tfm:CharacterWidth(unicodeArray[i]) * 10 * size
	end
	
	return lineWidth
end

function resetXpos(matrix, lineWidth, firstCharcterWidth, justify)
	local offet = 0
	if justify == 0 then
		offset = -lineWidth
	elseif justify == 1 then
		offset = -(lineWidth / 2)
	elseif justify == 2 then 
		offset = 0
	end

	matrix:Move(offset, 0, 0)
	matrix:Move(-(firstCharcterWidth/2), 0, 0)
end

function drawstring(img, font, style, size, justify, quality, x, y, color, text, highlightLow, highlightHigh)
	local ic = ImageChannel(img, quality) 
	local fs = FillStyle()

	ic:SetStyleFill(fs)
	
	-- get the fonts metrics (see http://freetype.sourceforge.net/freetype2/docs/glyphs/index.html for a great guide)
	local tfm = TextStyleFontMetrics(TextStyleFont(font, style))
	
	-- This is the distance between this line and the next one. 
	local line_height = (tfm.TextAscent + tfm.TextDescent + tfm.TextExternalLeading) * 10 * size 
	local x_move = 0
	
	local mat = Matrix4()
			
	mat:Scale(1.0/tfm.Scale, 1.0/tfm.Scale, 1.0)
	mat:Scale(size, size, 1)

	local shapeNormal = Shape()
	local shapeHighlight = Shape()
	mat:Move(x, y, 0)
	
	-- split the text into separate lines
	for line in string.gmatch(text, "%C+") do
		local unicodeArray = Utf8StrToUtf32Array(line)
		local lineWidth = getLineDrawWidth(unicodeArray, font, style, size)
		
		if justify == 0 then
			mat:Move(0, 0, 0)
		elseif justify == 1 then
			mat:Move(-(lineWidth/2), 0, 0)
		elseif justify == 2 then 
			mat:Move(-lineWidth, 0, 0)
		end
	
		local xPos = 0
		local firstCharcterWidth = 0
		for i = 1, #unicodeArray do
			local charcterCode = unicodeArray[i]
			local width = tfm:CharacterWidth(charcterCode) * 10 * size

			-- set the cursor position for the first character
			if i == 1 then
				mat:Move(width/2, 0, 0)
				xPos = width/2
				firstCharcterWidth = width
			end

			-- if this is not the first character, apply kerning
			if 1 < i  then
				local prevChar = unicodeArray[i - 1]
				local xOffset = tfm:CharacterKerning(prevChar, charcterCode) * 10 * size
				mat:Move(xOffset, 0, 0)
				xPos = xPos + xOffset
			end

			-- get the shape of the character
			local charcteShape = tfm:GetCharacterShape(charcterCode, false)
			if charcteShape then
				charcteShape = charcteShape:TransformOfShape(mat)
				if highlightLow <= i and i <= highlightHigh then
					print("highlight")
					shapeHighlight:AddShape(charcteShape)
				else
					shapeNormal:AddShape(charcteShape)
				end
			end

			xPos = xPos + width
			mat:Move(width, 0, 0)
		end
		
		-- line end, move the cursor back to the start
		resetXpos(mat, lineWidth, firstCharcterWidth, justify)
		mat:Move(0, -line_height, 0)
	end
	
	local csNormal = ChannelStyle()
	csNormal.Color = Pixel{R=1.0,G=1.0,B=1.0,A=1.0}
	ic:ShapeFill(shapeNormal)
	--ic:ShapeFill(shapeAfter)
	ic:PutToImage("CM_Merge", csNormal)

	local csHighlight = ChannelStyle()
	ic:ShapeFill(shapeHighlight)
	csHighlight.Color = color
	ic:PutToImage("CM_Merge", csHighlight)
	-- cs.Color = Color
	-- ic:ShapeFill(shapeHighlight)
	-- ic:PutToImage("CM_Merge", cs)
	
end
 
function Process(req) 	
	local img = InImage:GetValue(req)
	local font = InFont:GetValue(req).Value
	local style = InFontStyle:GetValue(req).Value
	local out = img:CopyOf()
	
	local highlightLow = InHighlightLow:GetValue(req).Value
	local highlightHigh = InHighlightHigh:GetValue(req).Value

	local text      = InText:GetValue(req).Value
	local size      = InSize:GetValue(req).Value
	local center    = InPosition:GetValue(req)
	local justify	= InJustify:GetValue(req).Value
	local r         = InR:GetValue(req).Value
	local g         = InG:GetValue(req).Value
	local b         = InB:GetValue(req).Value
	local a         = InA:GetValue(req).Value
	
	local cx = center.X
	local cy = center.Y * (out.Height * out.YScale) / (out.Width * out.XScale)
	local quality = 32
	
	-- if the FontManager list is empty, scan the font list
	-- If the UI has never been shown, as would always be the case on a render node, 
	-- nothing will scan the font list for available fonts. So we check for that here, 
	-- and force a scan if needed.
	if not next( FontManager:GetFontList() ) then
		FontManager:ScanDir()
	end

	
	if req:IsQuick() then 
		quality = 1
	end
	-- the drawstring function is doing all the heavy lifting 
	drawstring(out, font, style, size, justify, quality, cx, cy, Pixel{R=r,G=g,B=b,A=a}, text, highlightLow, highlightHigh)
	
	OutImage:Set(req, out)
end

function NotifyChanged(inp, param, time)
	-- when the tools FontFileControl is first created, the FontManager has not yet 
	-- provided a FontList, so we can't set a default value. Instead we do it here.
	print("notify")
	if inp == InFont then
		local f = param.Value
		
		if f == nil or string.len(f) == 0 then
			InFont:SetSource(Text("Open Sans"), time)
		end
	elseif inp == InFontStyle then
		local f = param.Value
		
		if f == nil or string.len(f) == 0 then
			InFontStyle:SetSource(Text("Regular"), time)
		end
	elseif inp == InText then
		local f = param.Value
		print("InText")
		if f then
			local unicode = Utf8StrToUtf32Array(f)
			if 1 < #unicode then
				local length = #unicode
				print(length)
				InHighlightLow:SetAttrs({ INP_MaxAllowed = length })
				InHighlightHigh:SetAttrs({ INP_MaxAllowed = length, INP_MaxScale = length })
				InHighlightHigh:SetSource(Number(length), 0)
			end
		end
	end
	
end

